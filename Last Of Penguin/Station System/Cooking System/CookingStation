using Lop.Survivor.Event.Mission;
using Lop.Survivor.inventroy.Item;
using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class CookingStation : Station
{
    [Header("Recipe Management")]
    //요리 레시피와 슬롯 관리: 레시피 리스트와 슬롯 리스트, 현재 레시피 정보
    [SerializeField] private List<Recipe> recipeList = new List<Recipe>();            //레시피 ScriptableObject 리스트
    [SerializeField] public List<RecipeSlot> recipeSlotList = new List<RecipeSlot>(); //레시피 슬롯 리스트
    [SerializeField] private Transform recipeParent;                                  //recipeSlot이 소환되는 곳
    [SerializeField] public Recipe currentRecipe;                                     //현재 제작할 아이템의 데이터
    [SerializeField] private GameObject recipeSlot;                                   //레시피 슬롯
    [SerializeField] private GameObject selectImage;                                  //현재 선택 중인 슬롯을 보여주는 이미지

    [Header("Crafting Progress")]
    //제작 진행 정보: 제작 티어, 현재 슬롯 인덱스, 제작 가능한 마지막 슬롯 인덱스
    public int craft_tier = 0;                                                        // 현재 제작 티어
    public int currentSlotIndex = 0;                                                  // 현재 선택된 슬롯 인덱스
    private int unlockedCombineSlotLastIndex;                                         // 제작 가능한 마지막 레시피 슬롯 인덱스

    [Header("Crafting Information")]
    //현재 선택한 아이템의 제작 정보: 제작할 아이템의 스프라이트, 이름, 제작 진행 상황, 제작 비용
    [SerializeField] private Image resualtItemImage;                                  //제작할 아이템 스프라이트
    [SerializeField] private TextMeshProUGUI resualtItemNameText;                     //제작할 아이템 이름 텍스트
    [SerializeField] private Image craftingGaugeImg;                                  //제작 진행 상황을 보여주는 이미지
    [SerializeField] private GameObject craftInformation;                             //아이템을 제작할 때 비용 뜨는 곳
    [SerializeField] private List<GameObject> currentMaterialBox;                     //현재 제작할 아이템의 비용
    [SerializeField] private TextMeshProUGUI currentHealth;                           // 제작할 아이템 변화하는 체력값
    [SerializeField] private TextMeshProUGUI currentTemperature;                      // 제작할 아이템 변화하는 온도값

    [Header("Crafting Variables")]
    //요리 및 제작 관련 변수: 제작 시간, 제작 키 홀드 여부, 인덱스 관리
    private float currentCookingTime;                                                 //제작키를 누르고 있는 시간
    private float craftHoldTime;                                                      //제작하고 있는 시간
    private bool isKeyHold = false;                                                   //A키를 누르고 있는지 확인하는 여부
    IEnumerator recipeCraftCorutine;                                                  //아이템 제작 코루틴

    [Header("Animation")]
    //애니메이션 관련 변수 : 완성, 제작불가 애니메이션
    [SerializeField] private Animator completeAnimator;                               //완성 애니메이션
    [SerializeField] private Animator dontCraftingAnimator;                           //제작불가 애니메이션
    public bool isAnimation;                                                          //애니메이션 실행 여부


    protected override void Start()
    {
        base.Start();
        isAnimation = true;
    }

    private void Update()
    {
        MoveSelectSlot();
        StartCookingItem();
    }

    #region 아이템 슬롯 이동
    private void MoveSelectSlot()
    {
        if (cookingPanel.activeSelf && isAnimation && !isKeyHold)
        {
            if (Input.GetKeyDown(KeyCode.LeftArrow))
            {
                currentSlotIndex--;
                if (currentSlotIndex < 0)
                {
                    currentSlotIndex = 0;
                }
                currentRecipe = recipeSlotList[currentSlotIndex].recipe;
                InitCraftUI();
                MoveSelectImage(recipeSlotList[currentSlotIndex]);
            }
            if (Input.GetKeyDown(KeyCode.RightArrow))
            {
                currentSlotIndex++;
                if (currentSlotIndex >= unlockedCombineSlotLastIndex)
                {
                    currentSlotIndex--;
                }
                currentRecipe = recipeSlotList[currentSlotIndex].recipe;
                InitCraftUI();
                MoveSelectImage(recipeSlotList[currentSlotIndex]);
            }
            if (Input.GetKeyDown(KeyCode.UpArrow))
            {
                currentSlotIndex -= columnCount;

                if (currentSlotIndex < 0)
                {
                    currentSlotIndex += columnCount;
                    //// 내 위치의 인덱스값
                    //int iconIndex = (currentSlotIndex + columnCount) % 5;

                    //// 제작할 수 있는 레시피의 마지막인덱스값
                    //int lastIndex = unlockedCombineSlotLastIndex % 5;

                    //if (lastIndex == 0)
                    //{
                    //    currentSlotIndex = unlockedCombineSlotLastIndex - 5 + iconIndex;
                    //}
                    //else if (iconIndex < lastIndex)
                    //{
                    //    currentSlotIndex = (unlockedCombineSlotLastIndex / 5) * 5 + iconIndex;
                    //}
                    //else
                    //{
                    //    currentSlotIndex = (unlockedCombineSlotLastIndex / 5) * 5 - 5 + iconIndex;
                    //}
                }

                currentRecipe = recipeSlotList[currentSlotIndex].recipe;
                InitCraftUI();
                MoveSelectImage(recipeSlotList[currentSlotIndex]);
            }
            if (Input.GetKeyDown(KeyCode.DownArrow))
            {
                currentSlotIndex += columnCount;

                if (currentSlotIndex > unlockedCombineSlotLastIndex - 1)
                {
                    currentSlotIndex -= columnCount;
                    //int a = (currentSlotIndex - columnCount) % 5;
                    //currentSlotIndex = a;
                }

                currentRecipe = recipeSlotList[currentSlotIndex].recipe;
                InitCraftUI();
                MoveSelectImage(recipeSlotList[currentSlotIndex]);
            }
        }
    }

    private void MoveSelectImage(RecipeSlot slot)
    {
        Image imageComponent = selectImage.GetComponent<Image>();
        selectImage.transform.SetParent(slot.transform);
        selectImage.transform.SetAsLastSibling();
        selectImage.transform.localPosition = Vector3.zero;
        selectImage.transform.localScale = Vector2.one;

        if (!imageComponent.enabled)
        {
            imageComponent.enabled = true;
        }
    }
    #endregion

    #region 아이템 목록 초기화
    /// <summary>
    /// 아이템 목록 초기화
    /// </summary>
    public void InitializeItemList()
    {
        GetItemDataInInventory();
        if(recipeSlotList.Count > 0)
        {
            foreach(var slot in recipeSlotList)
            {
                Destroy(slot.gameObject);
            }
            recipeSlotList.Clear();
        }

        recipeList.Sort((x,y) => x.order.CompareTo(y.order));

        List<Recipe> unlockedRecipes = new List<Recipe>();
        List<Recipe> lockedRecipes = new List<Recipe>();

        foreach(Recipe recipes in recipeList)
        {
            if(recipes.itemCraftTier > craft_tier)
            {
                lockedRecipes.Add(recipes);
            }
            else
            {
                unlockedRecipes.Add(recipes);
            }
        }

        unlockedCombineSlotLastIndex = unlockedRecipes.Count;

        List<Recipe> sortingRecipes = new List<Recipe>();
        sortingRecipes.AddRange(unlockedRecipes);
        sortingRecipes.AddRange(lockedRecipes);

        foreach(Recipe recipe in sortingRecipes)
        {
            GameObject recipeObj = Instantiate(recipeSlot, recipeParent);
            RecipeSlot recipeSlots = recipeObj.GetComponent<RecipeSlot>();
            recipeSlots.InitSlot(recipe.foodItemImg, recipe.foodItemImgGray, recipe);

            if(recipe.itemCraftTier > craft_tier)
            {
                recipeSlots.lockImage.gameObject.SetActive(true);
                recipeSlots.unableToCraftImage.gameObject.SetActive(true);
            }

            bool hasEnoughMaterials = true;
            foreach(var material in recipe.ingredients)
            {
                ItemMaterial foundMaterial = itemMaterialList.Find(m => m.materialId == material.materialId);
                if (foundMaterial == null || foundMaterial.materialAmount < material.materialAmount)
                {
                    hasEnoughMaterials = false;
                    break;
                }
            }
            if (!hasEnoughMaterials)
            {
                recipeSlots.unableToCraftImage.gameObject.SetActive(true);
            }
            recipeSlotList.Add(recipeSlots);
        }
        currentRecipe = recipeSlotList[currentSlotIndex].recipe;
        MoveSelectImage(recipeSlotList[currentSlotIndex]);
    }

    public void InitCraftUI()
    {
        resualtItemNameText.text = currentRecipe.resultItemName;
        resualtItemImage.sprite = currentRecipe.foodItemImg;
        currentHealth.text = currentRecipe.health.ToString();
        currentTemperature.text = currentRecipe.temperature.ToString();

        if (currentMaterialBox.Count > 0)
        {
            foreach (var curMtBox in currentMaterialBox)
            {
                Destroy(curMtBox);
            }
            currentMaterialBox.Clear();
        }

        foreach (var recipe in currentRecipe.ingredients)
        {
            GameObject mtBox = Instantiate(recipe.materialObj, craftInformation.transform);
            MaterialBox materialBox = mtBox.GetComponent<MaterialBox>();
            materialBox.MaterialBoxSet(craftInformation, recipe.materialAmount, 0);
            currentMaterialBox.Add(mtBox);
        }

        foreach (var haveMaterial in itemMaterialList)
        {
            for (int i = 0; i < currentRecipe.ingredients.Length; i++)
            {
                if (haveMaterial.materialId == currentRecipe.ingredients[i].materialId)
                {
                    currentMaterialBox[i].GetComponent<MaterialBox>().MaterialBoxSet(craftInformation, currentRecipe.ingredients[i].materialAmount, haveMaterial.materialAmount);
                }
            }
        }
    }
    #endregion

    #region 아이템 제작
    /// <summary>
    /// 요리 패널이 활성화되어 있고, 조합 가능한 아이템이 있을 때 'A' 키를 눌러 제작을 시작
    /// </summary>
    private void StartCookingItem()
    {
        if (cookingPanel.activeSelf && isAnimation)
        {
            if (Input.GetKeyDown(KeyCode.A))
            {
                if (CanCraftItem())
                {
                    isKeyHold = true;
                    craftHoldTime = 0;

                    recipeCraftCorutine = CookingItem();
                    StartCoroutine(recipeCraftCorutine);
                }
            }

            if (Input.GetKey(KeyCode.A) && isKeyHold)
            {
                craftHoldTime += Time.deltaTime;
                if (craftHoldTime > currentRecipe.cookingTime)
                {
                    isKeyHold = false;
                }
            }

            if (Input.GetKeyUp(KeyCode.A))
            {
                if (isKeyHold)
                {
                    // 제작 시간이 부족한 경우
                    if (craftHoldTime < currentRecipe.cookingTime)
                    {
                        StopCoroutine(recipeCraftCorutine);
                        Debug.Log("<color=yellow>제작이 취소되었습니다.</color>");
                        craftingGaugeImg.fillAmount = 0; // 프로그래스 바 초기화
                    }
                    isKeyHold = false;
                }
                craftHoldTime = 0;
            }
        }
    }

    /// <summary>
    /// 재료가 충분한지 확인하는 함수
    /// </summary>
    private bool CanCraftItem()
    {
        foreach (var requiredMaterial in currentRecipe.ingredients)
        {
            ItemMaterial haveMaterial = itemMaterialList.Find(m => m.materialId == requiredMaterial.materialId);
            if (haveMaterial == null || haveMaterial.materialAmount < requiredMaterial.materialAmount)
            {
                return false; // 재료가 부족하면 제작 불가
            }
        }
        return true; // 재료가 충분하면 제작 가능
    }

    /// <summary>
    /// 아이템 제작
    /// </summary>
    private IEnumerator CookingItem()
    {
        // 재료가 충분한지 확인하는 로직 추가
        bool canCraft = true;
        bool maxInventory = true;

        // 필요한 재료와 현재 소유한 재료를 비교하여 부족한 재료가 있는지 확인
        foreach (var requiredMaterial in currentRecipe.ingredients)
        {
            ItemMaterial haveMaterial = itemMaterialList.Find(m => m.materialId == requiredMaterial.materialId);
            if (haveMaterial == null || haveMaterial.materialAmount < requiredMaterial.materialAmount)
            {
                canCraft = false;
                break; // 하나라도 부족하면 제작 불가
            }
        }

        for (int i = 0; i < inventory.slotDatas.Count; i++)
        {
            if (inventory.slotDatas[i].slotItemData == null)
            {
                maxInventory = false;
            }
        }

        if (canCraft && !maxInventory) // 재료가 충분할 경우에만 제작 진행
        {
            craftingGaugeImg.gameObject.SetActive(true);
            currentCookingTime = 0;
            craftingGaugeImg.fillAmount = 0;

            while (isKeyHold && currentCookingTime < currentRecipe.cookingTime)
            {
                currentCookingTime += Time.deltaTime;
                craftingGaugeImg.fillAmount = (currentCookingTime / currentRecipe.cookingTime);
                yield return null;
            }

            if (craftHoldTime > currentRecipe.cookingTime) // 제작 완료 시간이 경과했을 때만 처리
            {
                // 필요한 재료들로 검사하기
                for (int i = 0; i < currentRecipe.ingredients.Length; i++)
                {
                    ItemMaterial currentCombineData = currentRecipe.ingredients[i];

                    // 남은 재료 차감량
                    int remainingInventoryAmount = currentCombineData.materialAmount;
                    int remainingToolWheelAmount = currentCombineData.materialAmount;

                    // 1. Inventory에서 차감
                    while (remainingInventoryAmount > 0)
                    {
                        int minSlotIndex = -1;
                        int minSlotCount = int.MaxValue;

                        // 가장 적은 수량을 가진 슬롯을 찾는 과정
                        for (int j = 0; j < inventory.slotDatas.Count; j++)
                        {
                            ItemData item = inventory.slotDatas[j].slotItemData;
                            if (item != null && item.itemName == currentCombineData.materialId)
                            {
                                int slotItemCount = inventory.slotDatas[j].itemCount;

                                if (slotItemCount > 0 && slotItemCount < minSlotCount)
                                {
                                    minSlotCount = slotItemCount;
                                    minSlotIndex = j;
                                }
                            }
                        }

                        if (minSlotIndex == -1)
                        {
                            break; // 재료가 더 이상 없는 경우 종료
                        }

                        // 가장 적은 수량을 가진 슬롯에서 재료를 차감
                        Lop.Survivor.inventroy.UI.InventorySlot minSlot = inventory.slotDatas[minSlotIndex];
                        if (minSlot.itemCount > remainingInventoryAmount)
                        {
                            minSlot.itemCount -= remainingInventoryAmount;
                            minSlot.countText.text = minSlot.itemCount.ToString();
                            remainingInventoryAmount = 0; // 남은 차감량 0으로 설정
                        }
                        else
                        {
                            remainingInventoryAmount -= minSlot.itemCount;
                            minSlot.itemCount = 0;
                            minSlot.InitSlotItemData(null, 0);
                            minSlot.countText.gameObject.SetActive(false);
                            minSlot.countBackgroundImage.SetActive(false);
                        }
                    }
                    // 2. ToolWheel에서 차감
                    while (remainingToolWheelAmount > 0)
                    {
                        int toolMinSlotIndex = -1;
                        int toolMinSlotCount = int.MaxValue;

                        for (int j = 0; j < toolWheel.toolSlots.Count; j++)
                        {
                            ItemData item = toolWheel.toolSlots[j].itemData;
                            if (item != null && item.itemName == currentCombineData.materialId)
                            {
                                int slotItemCount = toolWheel.toolSlots[j].slotItemCount;

                                if (slotItemCount > 0 && slotItemCount < toolMinSlotCount)
                                {
                                    toolMinSlotCount = slotItemCount;
                                    toolMinSlotIndex = j;
                                }
                            }
                        }

                        if (toolMinSlotIndex == -1)
                        {
                            break; // 재료가 더 이상 없는 경우 종료
                        }

                        // 가장 적은 수량을 가진 슬롯에서 재료를 차감
                        ToolSlot toolMinSlot = toolWheel.toolSlots[toolMinSlotIndex];
                        if (toolMinSlot.slotItemCount > remainingToolWheelAmount)
                        {
                            toolMinSlot.slotItemCount -= remainingToolWheelAmount;
                            toolMinSlot.countText.text = toolMinSlot.slotItemCount.ToString();
                            remainingToolWheelAmount = 0;
                        }
                        else
                        {
                            remainingToolWheelAmount -= toolMinSlot.slotItemCount;
                            toolMinSlot.slotItemCount = 0;
                            toolMinSlot.ClearSlot();
                        }
                    }

                    // 만약 두 곳에서 모두 차감 후에도 재료가 남아 있다면 부족 경고 출력
                    if (remainingInventoryAmount > 0 || remainingToolWheelAmount > 0)
                    {
                        Debug.LogWarning("재료가 부족합니다: " + currentCombineData.materialId);
                    }
                }

                inventory.ItemToInventory(currentRecipe.resultItemEngName);
                MissionManager.Instance.EventCollect(MissionType.Make, currentRecipe.resultItemEngName);
                GameManager.Instance.craftItemCountVel++;
                for (int j = 0; j < currentRecipe.ingredients.Length; j++)
                {
                    MissionManager.Instance.RemoveCollectEvent(currentRecipe.ingredients[j].materialId, currentRecipe.ingredients[j].materialAmount);
                }
                Debug.Log("<color=green>아이템이 제작되었습니다.</color>");
            }

            craftingGaugeImg.fillAmount = 0;
            craftingGaugeImg.gameObject.SetActive(false);
            completeAnimator.SetTrigger("Play");
        }
        else if(maxInventory)
        {
            dontCraftingAnimator.SetTrigger("Play");
            isKeyHold = false;
        }
        currentCookingTime = 0;
        InitializeItemList();
        InitCraftUI();
    }
    #endregion
}
